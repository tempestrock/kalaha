<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ComputerSuggests" xml:space="preserve">
    <value>The computer suggests to take pit #{0}.</value>
    <comment>0: pit number</comment>
  </data>
  <data name="EmptyPit" xml:space="preserve">
    <value>That doesn't work. Try again!</value>
  </data>
  <data name="GameEndedInDraw" xml:space="preserve">
    <value>It's a draw.</value>
  </data>
  <data name="LastMoveUndone" xml:space="preserve">
    <value>One step back.</value>
  </data>
  <data name="LastSeedInEmptyPit" xml:space="preserve">
    <value>Capture!</value>
    <comment>0: pit number</comment>
  </data>
  <data name="PlayersTurnAgain" xml:space="preserve">
    <value>Extra move!</value>
    <comment>0: player's name</comment>
  </data>
  <data name="PlayerWon" xml:space="preserve">
    <value>Congratulations, {0}!</value>
    <comment>0: player's name</comment>
  </data>
  <data name="PleaseEnterNumber" xml:space="preserve">
    <value>Please enter a number.</value>
  </data>
  <data name="SelectPit" xml:space="preserve">
    <value>{0}</value>
    <comment>0: player's name</comment>
  </data>
  <data name="UndoImpossible" xml:space="preserve">
    <value>No step back possible.</value>
  </data>
  <data name="Explain_CaptureSeedsAtEndOn" xml:space="preserve">
    <value>Rule switched on: Capture the seeds that are left in the houses at the end of the game.</value>
  </data>
  <data name="Explain_ComputerOpponent_0" xml:space="preserve">
    <value>This opponent is easy to beat even for you!</value>
  </data>
  <data name="Explain_ComputerOpponent_1" xml:space="preserve">
    <value>This opponent is more difficult to beat.</value>
  </data>
  <data name="Explain_ComputerOpponent_2" xml:space="preserve">
    <value>You will hardly win against this opponent.</value>
  </data>
  <data name="Explain_EmptyCapture" xml:space="preserve">
    <value>Rule: Only get the own seed in a capture move, not the opponent's seeds..</value>
  </data>
  <data name="Explain_HoldFingerToChangeName" xml:space="preserve">
    <value>Click with the right mouse button or hold your finger onto this button to change the player's name.</value>
  </data>
  <data name="Explain_NumHousesChanged" xml:space="preserve">
    <value>The number of houses for each player</value>
  </data>
  <data name="Explain_SowingDir_1" xml:space="preserve">
    <value>The seeds are sown in clockwise direction.</value>
    <comment>clockwise</comment>
  </data>
  <data name="Explain_SowingDir_0" xml:space="preserve">
    <value>The seeds are sown in counter-clockwise direction.</value>
    <comment>counter-clockwise</comment>
  </data>
  <data name="Explain_SowingDir_2" xml:space="preserve">
    <value>For experts: an odd number of seeds is sown clockwise, an even number counter-clockwise.</value>
    <comment>"Cross-Kalah"</comment>
  </data>
  <data name="Explain_Theme" xml:space="preserve">
    <value>Theme "{0}" - {1}</value>
    <comment>0: theme name, 1: subtitle</comment>
  </data>
  <data name="Explain_NumSeedsChanged" xml:space="preserve">
    <value>The initial number of seeds in a house</value>
  </data>
  <data name="Explain_CaptureType_0" xml:space="preserve">
    <value>Only if seeds are in the opponent's house, the own seed and the opponent's seeds are captured.</value>
    <comment>Standard</comment>
  </data>
  <data name="Explain_CaptureType_1" xml:space="preserve">
    <value>Only the player's own seed is captured.</value>
    <comment>"Empty Capture"</comment>
  </data>
  <data name="Explain_CaptureType_2" xml:space="preserve">
    <value>No seed is ever captured.</value>
    <comment>Never capture</comment>
  </data>
  <data name="Explain_CaptureType_3" xml:space="preserve">
    <value>The own seed and the opponent's seeds are always captured.</value>
    <comment>Always capture</comment>
  </data>
  <data name="Explain_CaptureSeedsAtEndOff" xml:space="preserve">
    <value>Rule switched off: Do not capture the seeds that are left in the houses at the end of the game.</value>
  </data>
</root>